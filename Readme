# One-Shot Facial Verification System

A **real-time facial verification system** that uses a **Siamese Neural Network** to compare facial embeddings for access control. This project integrates live webcam functionality using **OpenCV** and leverages the **Labeled Faces in the Wild (LFW)** dataset to train the neural network for one-shot learning.

## Features
- **Siamese Neural Network**: Custom layers for embedding extraction and similarity comparison.
- **Data Processing Pipeline**: Preprocessing, feature extraction, and similarity computation.
- **Real-Time Verification**: Live webcam integration for facial verification.
- **One-Shot Learning**: Trained with the LFW dataset to minimize the need for large-scale labeled data.

---

## How It Works

1. **LFW Dataset**:
   - The **Labeled Faces in the Wild (LFW)** dataset is used for negative samples in training.
   - These images serve as dissimilar comparisons for the Siamese Neural Network.

2. **Data Collection**:
   - Collect positive (similar) and anchor (reference) images using your webcam.
   - For optimal performance, aim to collect **300-400 positive and anchor images** during the collection phase.

3. **Real-Time Verification**:
   - The system compares a live input image to stored verification images.
   - Outputs "Access Granted" or "Access Denied" based on similarity.

---

## Instructions

1. **Install Required Libraries**:
   - Use the following command to install dependencies:
     ```bash
     pip install tensorflow opencv-python matplotlib
     ```

2. **Prepare for Data Collection**:
   - Ensure the LFW dataset is extracted into the `data/negative` directory.
   - Positive and anchor images will be collected using the built-in webcam functionality in the code.

3. **Collect Images**:
   - Run the code provided and:
     - Press `p` to capture positive images.
     - Press `a` to capture anchor images.
     - Press `q` to exit.

4. **Run the Project**:
   - All necessary scripts and instructions are integrated into the Jupyter Notebook. Simply execute the cells step-by-step to:
     - Train the Siamese Neural Network.
     - Conduct real-time facial verification using the webcam.

---

## Model Overview

The **Siamese Neural Network** architecture:
1. **Embedding Layers**: Extract features from input images using convolutional layers.
2. **Distance Calculation**: Compute similarity using L1 distance.
3. **Classification Layer**: Predict similarity scores using a sigmoid function.

### Training Pipeline
1. Preprocess images (resize to 100x100 and normalize).
2. Pair positive and negative samples with labels (1 for positive, 0 for negative).
3. Train using binary cross-entropy loss.

### Real-Time Verification
1. Capture live input via webcam.
2. Compare input with verification samples.
3. Return **"Access Granted"** or **"Access Denied"** based on similarity.

---

## Future Improvements
- **Optimize Inference Speed**: Integrate GPU acceleration for real-time performance.
- **Improve Dataset**: Expand with additional diverse images for better generalization.
- **Add Security Features**: Implement spoof detection to enhance security.

---

## References
- [One-Shot Learning with Siamese Networks (Koch et al.)](https://www.cs.toronto.edu/~zemel/documents/oneshot1.pdf)
